global
    log stdout local0
    # chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Lua configuration
    lua-prepend-path /usr/local/etc/haproxy/lua-scripts/?.lua
    lua-load /usr/local/etc/haproxy/lua-scripts/json.lua
    lua-load /usr/local/etc/haproxy/lua-scripts/challenge.lua
    lua-load /usr/local/etc/haproxy/lua-scripts/inspect-protection.lua
    lua-load /usr/local/etc/haproxy/lua-scripts/response-protection.lua

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option forwardfor
    timeout connect 5000
    timeout client  50000
    timeout server  50000

# Frontend for incoming traffic
frontend web_frontend
    bind *:8081
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header X-Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none';"
    http-response set-header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Browser inspect protection
    http-request lua.inspect_protection
    http-request deny if { var(req.inspect_blocked) -m str 1 }
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 30 }
    
    # ACL definitions
    acl is_challenge_page path_beg /challenge
    acl is_api_challenge path_beg /api/challenge
    acl is_api_validate path_beg /api/validate
    acl is_api_health path_beg /api/health
    acl is_health_check path_beg /health
    acl is_static_files path_beg /public/ /css/ /js/ /images/ /fonts/
    
    # Session validation using Lua action
    http-request lua.validate_session_action unless is_challenge_page or is_api_challenge or is_api_validate or is_api_health or is_health_check or is_static_files
    acl has_valid_session var(req.session_valid) -m str 1
    
    # API endpoints - use Lua service
    http-request use-service lua.api_service if is_api_challenge or is_api_validate or is_api_health
    
    # Serve challenge page with inspect protection
    http-request use-service lua.serve_challenge_page if is_challenge_page
    
    # Use protection service for all protected HTML responses
    http-request use-service lua.inject_protection if has_valid_session !is_static_files !is_health_check
    
    # Redirect to challenge if no valid session
    http-request redirect location /challenge unless has_valid_session or is_challenge_page or is_api_challenge or is_api_validate or is_health_check or is_static_files
    
    # Default backend for validated sessions (fallback)
    default_backend protected_backend

# Protected backend (your actual application)
backend protected_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    http-request set-header X-Challenge-Validated true
    server app1 127.0.0.1:8080 check inter 10s rise 2 fall 3

# Statistics interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 5s
    stats show-node
    stats show-legends
    stats show-desc "HAProxy with Lua-based JS Challenge Bot Protection" 
